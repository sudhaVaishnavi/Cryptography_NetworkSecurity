from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.padding import PKCS7
from cryptography.hazmat.backends import default_backend
import os
import base64
from io import BytesIO
from google.colab import files

def generate_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def encrypt_file(file_data: bytes, password: str) -> bytes:

    salt = os.urandom(16)
    iv = os.urandom(16)

    key = generate_key(password, salt)

    padder = PKCS7(128).padder()
    padded_plaintext = padder.update(file_data) + padder.finalize()

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()
    return salt + iv + ciphertext

def decrypt_file(encrypted_data: bytes, password: str) -> bytes:
    salt = encrypted_data[:16]
    iv = encrypted_data[16:32]
    ciphertext = encrypted_data[32:]

    key = generate_key(password, salt)

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()

    unpadder = PKCS7(128).unpadder()
    plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()

    return plaintext

if __name__ == "__main__":
    key = input("Key for encryption and decryption: ")

    print("Upload the file to encrypt.")
    uploaded_file = files.upload()
    file_name = list(uploaded_file.keys())[0]
    file_data = uploaded_file[file_name]

    encrypted_data = encrypt_file(file_data, key)
    print(f"Encrypted file data (base64): {base64.b64encode(encrypted_data).decode()}")

    print("Upload the encrypted file to decrypt.")
    encrypted_file = files.upload()
    encrypted_file_name = list(encrypted_file.keys())[0]
    encrypted_file_data = base64.b64decode(encrypted_file[encrypted_file_name])

    decrypted_data = decrypt_file(encrypted_file_data,key)
    print(f"Decrypted file content: \n{decrypted_data.decode()}\n")

    with open("decrypted_output.txt", "wb") as f:
        f.write(decrypted_data)
    print("Decrypted file saved as 'decrypted_output.txt'.")
